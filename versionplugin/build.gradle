apply plugin: 'kotlin'
apply plugin: 'java-gradle-plugin'

//https://blog.csdn.net/petterp/article/details/122818003

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        // 因为使用的 Kotlin 需要需要添加 Kotlin 插件
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.20"
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.20"
}

//本地依赖插件时使用
gradlePlugin {
    plugins {
        //插件名，每一个插件都可以有
        version {
            //你的插件id，外部项目引用时需要
            id = 'com.yuyang.gradle.versionPlugin'
            //插件的具体实现类的路径
            implementationClass = 'com.yuyang.versionplugin.VersionGradlePlugin'
        }
    }
}

apply plugin: 'maven-publish'
//https://www.jianshu.com/p/a66843b95682
//https://www.jianshu.com/p/340b69ebb6bf

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

publishing {
    publications {
        maven(MavenPublication) {
            // 使用方引用 implementation 'com.suning.live.snlivepush:snlivepush:1.0'
            groupId = 'com.suning.live.snlivepush'
            artifactId = 'snlivepush'
            version = '1.0'
            // 依赖 bundleReleaseAar 任务，并上传其产出的aar
            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
            // 也可以指定上传的AAR包，但是需要先手动生成aar
            // artifact("$buildDir/outputs/aar/${project.getName()}-debug.aar")
            // 上传source，这样使用放可以看到方法注释
            artifact generateSourcesJar

//            artifact sourcesJar
//            artifact javadocJar
//            from components.java

            // pom文件中声明依赖，从而传递到使用方
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // 避免出现空节点或 artifactId=unspecified 的节点
                    if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                        println it.toString()
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'implementation')
                    }
                }
            }
        }
    }

    repositories {
        // 定义一个 maven 仓库
        maven {
            // 基于版本名称选择不同的仓库地址
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            // 仓库地址
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            // 仓库用户名密码
//            credentials {
//                username = "root"
//                password = "root"
//            }
        }
        // 定义第二个 maven 仓库，名为 Nexus
//        maven {
//            // 必须显示指定 name
//            name = "nexus"
//            url = versionName.endsWith('SNAPSHOT') ? SNAPSHOT_REPOSITORY_URL : RELEASE_REPOSITORY_URL
//        }
    }
}